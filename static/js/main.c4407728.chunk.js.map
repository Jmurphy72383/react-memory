{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Score/Score.js","components/Card/Card.js","components/Wrapper/Wrapper.js","components/Modal/Modal.js","components/WinModal/WinModal.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Jumbotron","props","Score","score","topScore","Card","alt","src","image","onClick","shuffleObject","id","Wrapper","children","Modal","resetGameHandler","WinModal","App","state","img","clicked","showWinModal","showLoseModal","setToClicked","e","now","target","sort","Math","random","_this","setState","concat","Object","toConsumableArray","includes","_this2","this","Navbar_Navbar","components_Jumbotron_Jumbotron","components_Score_Score","components_Modal_Modal","components_WinModal_WinModal","components_Wrapper_Wrapper","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4407728.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Nav = () => (\r\n    <div className=\"nav-wrapper\">\r\n        <h1 className=\"navbar-h1\">Fallout</h1>\r\n        {/* <nav>\r\n            <p>Score: {props.score} </p>\r\n            <p>Top Score: {props.topScore} </p>\r\n        </nav> */}\r\n    </div>\r\n);\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Jumbotron.css';\r\n\r\nconst Jumbotron = (props) => (\r\n    <div className=\"jumbotron-div\">\r\n        <h2>Click on an image to earn points, but dont click on any more than once!</h2>\r\n    </div>\r\n);\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './Score.css'\r\n\r\nconst Score = (props) => (\r\n    <div className=\"score-div\">\r\n        <h3 className=\"score-h3\">Score: {props.score} </h3>\r\n        <h3 className=\"score-h3\">Top Score: {props.topScore} </h3>\r\n    </div>\r\n);\r\n\r\nexport default Score;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-div\">\r\n        <img alt='' src={props.image} onClick={props.shuffleObject} id={props.id}/>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nconst Modal = (props) => (\r\n    <div className=\"modal-div\">\r\n        <h1>Better Luck Next Time!</h1>\r\n        <img src=\"https://media1.tenor.com/images/b75b0c9ca2c071c670bca23c7ed06f10/tenor.gif?itemid=4927079\" alt=\"loser\"></img>\r\n        <div className=\"btn-div\">\r\n            <button onClick={props.resetGameHandler}>Play Again</button>\r\n        </div>\r\n        \r\n    </div>\r\n);\r\n\r\nexport default Modal;","import React from 'react';\r\nimport './WinModal.css';\r\n\r\nconst WinModal = (props) => (\r\n    <div className=\"modal-div\">\r\n        <h1>Winner!</h1>\r\n        <img src=\"https://media0.giphy.com/media/xUOxfg0ESyhKOv4Vva/giphy.gif\" alt=\"victory\"></img>\r\n        <div className=\"btn-div\">\r\n            <button onClick={props.resetGameHandler}>Play Again</button>\r\n        </div>\r\n        \r\n    </div>\r\n);\r\n\r\nexport default WinModal;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Nav from './components/Navbar';\r\nimport Jumbotron from './components/Jumbotron';\r\nimport Score from './components/Score';\r\nimport Card from './components/Card';\r\nimport Wrapper from './components/Wrapper';\r\nimport Modal from './components/Modal';\r\nimport WinModal from './components/WinModal';\r\nimport img from './img.json';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    img,\r\n    score: 0,\r\n    topScore: 12,\r\n    clicked: [],\r\n    showWinModal: false,\r\n    showLoseModal: false\r\n  };\r\n\r\n  setToClicked = (e) => {\r\n    const now = e.target.id\r\n    const shuffleObject = img.sort(() => Math.random() - 0.5);\r\n    this.setState({ img: shuffleObject});\r\n    this.setState({ clicked: [...this.state.clicked, now] });\r\n    if(this.state.clicked.includes(now) === true) {\r\n      this.setState({ score: 0, clicked: []});\r\n      this.setState({ showLoseModal: true });\r\n    } else {\r\n      this.setState({ score: this.state.score + 1});\r\n    }\r\n    \r\n  };\r\n\r\n  resetGameHandler = () => {\r\n    this.setState({\r\n      img,\r\n      score: 0,\r\n      clicked: [],\r\n      showLoseModal: false,\r\n      showWinModal: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (    \r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Jumbotron />\r\n        <Score score={this.state.score} topScore={this.state.topScore}/>\r\n        {this.state.showLoseModal === true ?\r\n          <Modal resetGameHandler={this.resetGameHandler} /> \r\n          : null\r\n        }\r\n        {this.state.score === 12 ?\r\n          <WinModal resetGameHandler={this.resetGameHandler} /> \r\n          : null\r\n        }\r\n        <Wrapper>\r\n          {this.state.img.map(img => (\r\n            <Card image={img.image} shuffleObject={this.setToClicked} key={img.id} id={img.id} />\r\n          ))}\r\n        </Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}